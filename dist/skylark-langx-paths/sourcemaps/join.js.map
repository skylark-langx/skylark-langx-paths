{"version":3,"sources":["join.js"],"names":["define","paths","normalize","join","segs","_i","arguments","length","processed","i","segment","TypeError","push","sep"],"mappings":";;;;;;;AAAAA,QACC,UACG,eACF,SAASC,EAAMC,GAoCb,OAAOD,EAAME,KApBb,WAEI,IADA,IAAIC,KACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,GAK7B,IADA,IAAIG,KACKC,EAAI,EAAGA,EAAIL,EAAKG,OAAQE,IAAK,CAClC,IAAIC,EAAUN,EAAKK,GACnB,GAAuB,iBAAZC,EACP,MAAM,IAAIC,UAAU,8CAAiDD,GAEpD,KAAZA,GACLF,EAAUI,KAAKF,GAGvB,OAAOR,EAAUM,EAAUL,KAAKF,EAAMY","file":"../join.js","sourcesContent":["define([\r\n\t\"./paths\",\r\n    \"./normalize\"\r\n],function(paths,normalize){\r\n    /**\r\n     * Join all arguments together and normalize the resulting path.\r\n     *\r\n     * Arguments must be strings.\r\n     * @example Usage\r\n     *   paths.join('/foo', 'bar', 'baz/asdf', 'quux', '..')\r\n     *   // returns\r\n     *   '/foo/bar/baz/asdf'\r\n     *\r\n     *   paths.join('foo', {}, 'bar')\r\n     *   // throws exception\r\n     *   TypeError: Arguments to paths.join must be strings\r\n     * @param [String,...] segs Each component of the path\r\n     * @return [String]\r\n     */\r\n    function join() {\r\n        var segs = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            segs[_i - 0] = arguments[_i];\r\n        }\r\n        // Required: Prune any non-strings from the path. I also prune empty segments\r\n        // so we can do a simple join of the array.\r\n        var processed = [];\r\n        for (var i = 0; i < segs.length; i++) {\r\n            var segment = segs[i];\r\n            if (typeof segment !== 'string') {\r\n                throw new TypeError(\"Invalid argument type to segs.join: \" + (typeof segment));\r\n            }\r\n            else if (segment !== '') {\r\n                processed.push(segment);\r\n            }\r\n        }\r\n        return normalize(processed.join(paths.sep));\r\n    }\r\n\r\n    return paths.join = join;\r\n});"]}