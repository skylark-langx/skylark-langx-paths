{"version":3,"sources":["basename.js"],"names":["define","paths","basename","p","ext","sections","normalize","split","sep","lastPart","length","substr"],"mappings":";;;;;;;AAAAA,QACC,WACC,SAASC,GAyCP,OAAOA,EAAMC,SA1Bb,SAAkBC,EAAGC,GAGjB,QAFY,IAARA,IAAkBA,EAAM,IAElB,KAAND,EACA,OAAOA,EAKX,IAAIE,GAFJF,EAAIF,EAAMK,UAAUH,IAEHI,MAAMN,EAAMO,KACzBC,EAAWJ,EAASA,EAASK,OAAS,GAG1C,MAAiB,KAAbD,GAAmBJ,EAASK,OAAS,EAC9BL,EAASA,EAASK,OAAS,GAGlCN,EAAIM,OAAS,GACKD,EAASE,OAAOF,EAASC,OAASN,EAAIM,UACpCN,EACTK,EAASE,OAAO,EAAGF,EAASC,OAASN,EAAIM,QAGjDD","file":"../basename.js","sourcesContent":["define([\r\n\t\"./paths\"\r\n],function(paths){\r\n    /**\r\n     * Return the last portion of a path. Similar to the Unix basename command.\r\n     * @example Usage example\r\n     *   paths.basename('/foo/bar/baz/asdf/quux.html')\r\n     *   // returns\r\n     *   'quux.html'\r\n     *\r\n     *   paths.basename('/foo/bar/baz/asdf/quux.html', '.html')\r\n     *   // returns\r\n     *   'quux'\r\n     * @param [String] p\r\n     * @param [String?] ext\r\n     * @return [String]\r\n     */\r\n    function basename(p, ext) {\r\n        if (ext === void 0) { ext = \"\"; }\r\n        // Special case: Normalize will modify this to '.'\r\n        if (p === '') {\r\n            return p;\r\n        }\r\n        // Normalize the string first to remove any weirdness.\r\n        p = paths.normalize(p);\r\n        // Get the last part of the string.\r\n        var sections = p.split(paths.sep);\r\n        var lastPart = sections[sections.length - 1];\r\n        // Special case: If it's empty, then we have a string like so: foo/\r\n        // Meaning, 'foo' is guaranteed to be a directory.\r\n        if (lastPart === '' && sections.length > 1) {\r\n            return sections[sections.length - 2];\r\n        }\r\n        // Remove the extension, if need be.\r\n        if (ext.length > 0) {\r\n            var lastPartExt = lastPart.substr(lastPart.length - ext.length);\r\n            if (lastPartExt === ext) {\r\n                return lastPart.substr(0, lastPart.length - ext.length);\r\n            }\r\n        }\r\n        return lastPart;\r\n    }\r\n\r\n    return paths.basename = basename;\r\n});"]}