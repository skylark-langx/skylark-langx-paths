{"version":3,"sources":["resolve.js"],"names":["define","paths","normalize","resolve","_i","arguments","length","processed","i","p","TypeError","charAt","sep","push","resolved","join","substr","cwd","process"],"mappings":";;;;;;;AAAAA,QACC,UACA,eACC,SAASC,EAAMC,GAuFb,OAAOD,EAAME,QA/Cb,WAEI,IADA,IAAIF,KACKG,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCH,EAAMG,EAAK,GAAKC,UAAUD,GAK9B,IADA,IAAIG,KACKC,EAAI,EAAGA,EAAIP,EAAMK,OAAQE,IAAK,CACnC,IAAIC,EAAIR,EAAMO,GACd,GAAiB,iBAANC,EACP,MAAM,IAAIC,UAAU,+CAAkDD,GAE3D,KAANA,IAGDA,EAAEE,OAAO,KAAOV,EAAMW,MACtBL,MAEJA,EAAUM,KAAKJ,IAIvB,IAAIK,EAAWZ,EAAUK,EAAUQ,KAAKd,EAAMW,MAC9C,GAAIE,EAASR,OAAS,GAAKQ,EAASH,OAAOG,EAASR,OAAS,KAAOL,EAAMW,IACtE,OAAOE,EAASE,OAAO,EAAGF,EAASR,OAAS,GAIhD,GAAIQ,EAASH,OAAO,KAAOV,EAAMW,IAAK,CAEP,MAAvBE,EAASH,OAAO,IAAmC,IAApBG,EAASR,QAAgBQ,EAASH,OAAO,KAAOV,EAAMW,MACrFE,EAA+B,IAApBA,EAASR,OAAe,GAAKQ,EAASE,OAAO,IAG5D,IAAIC,EAAMC,QAAQD,MAGdH,EAFa,KAAbA,EAEWZ,EAAUe,GAAe,MAARA,EAAchB,EAAMW,IAAM,IAAME,GAGjDG,EAGnB,OAAOH","file":"../resolve.js","sourcesContent":["define([\r\n\t\"./paths\",\r\n\t\"./normalize\"\r\n],function(paths,normalize){\r\n    /**\r\n     * Resolves to to an absolute path.\r\n     *\r\n     * If to isn't already absolute from arguments are prepended in right to left\r\n     * order, until an absolute path is found. If after using all from paths still\r\n     * no absolute path is found, the current working directory is used as well.\r\n     * The resulting path is normalized, and trailing slashes are removed unless\r\n     * the path gets resolved to the root directory. Non-string arguments are\r\n     * ignored.\r\n     *\r\n     * Another way to think of it is as a sequence of cd commands in a shell.\r\n     *\r\n     *     paths.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile')\r\n     *\r\n     * Is similar to:\r\n     *\r\n     *     cd foo/bar\r\n     *     cd /tmp/file/\r\n     *     cd ..\r\n     *     cd a/../subfile\r\n     *     pwd\r\n     *\r\n     * The difference is that the different paths don't need to exist and may also\r\n     * be files.\r\n     * @example Usage example\r\n     *   paths.resolve('/foo/bar', './baz')\r\n     *   // returns\r\n     *   '/foo/bar/baz'\r\n     *\r\n     *   paths.resolve('/foo/bar', '/tmp/file/')\r\n     *   // returns\r\n     *   '/tmp/file'\r\n     *\r\n     *   paths.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\r\n     *   // if currently in /home/myself/node, it returns\r\n     *   '/home/myself/node/wwwroot/static_files/gif/image.gif'\r\n     * @param [String,...] paths\r\n     * @return [String]\r\n     */\r\n    function resolve() {\r\n        var paths = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            paths[_i - 0] = arguments[_i];\r\n        }\r\n        // Monitor for invalid paths, throw out empty paths, and look for the *last*\r\n        // absolute path that we see.\r\n        var processed = [];\r\n        for (var i = 0; i < paths.length; i++) {\r\n            var p = paths[i];\r\n            if (typeof p !== 'string') {\r\n                throw new TypeError(\"Invalid argument type to paths.join: \" + (typeof p));\r\n            }\r\n            else if (p !== '') {\r\n                // Remove anything that has occurred before this absolute path, as it\r\n                // doesn't matter.\r\n                if (p.charAt(0) === paths.sep) {\r\n                    processed = [];\r\n                }\r\n                processed.push(p);\r\n            }\r\n        }\r\n        // Special: Remove trailing slash unless it's the root\r\n        var resolved = normalize(processed.join(paths.sep));\r\n        if (resolved.length > 1 && resolved.charAt(resolved.length - 1) === paths.sep) {\r\n            return resolved.substr(0, resolved.length - 1);\r\n        }\r\n        // Special: If it doesn't start with '/', it's relative and we need to append\r\n        // the current directory.\r\n        if (resolved.charAt(0) !== paths.sep) {\r\n            // Remove ./, since we're going to append the current directory.\r\n            if (resolved.charAt(0) === '.' && (resolved.length === 1 || resolved.charAt(1) === paths.sep)) {\r\n                resolved = resolved.length === 1 ? '' : resolved.substr(2);\r\n            }\r\n            // Append the current directory, which *must* be an absolute path.\r\n            var cwd = process.cwd();\r\n            if (resolved !== '') {\r\n                // cwd will never end in a /... unless it's the root.\r\n                resolved = normalize(cwd + (cwd !== '/' ? paths.sep : '') + resolved);\r\n            }\r\n            else {\r\n                resolved = cwd;\r\n            }\r\n        }\r\n        return resolved;\r\n    }\r\n\r\n    return paths.resolve = resolve;\r\n});"]}