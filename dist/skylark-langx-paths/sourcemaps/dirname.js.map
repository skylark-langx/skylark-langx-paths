{"version":3,"sources":["dirname.js"],"names":["define","paths","dirname","p","absolute","_removeDuplicateSeps","charAt","sep","sections","split","pop","length","join"],"mappings":";;;;;;;AAAAA,QACC,WACC,SAASC,GAqCP,OAAOA,EAAMC,QAxBb,SAAiBC,GAIb,IAAIC,GADJD,EAAIF,EAAMI,qBAAqBF,IACdG,OAAO,KAAOL,EAAMM,IACjCC,EAAWL,EAAEM,MAAMR,EAAMM,KAQ7B,MANuB,KAAnBC,EAASE,OAAgBF,EAASG,OAAS,GAC3CH,EAASE,MAKTF,EAASG,OAAS,GAA0B,IAApBH,EAASG,SAAiBP,EAC3CI,EAASI,KAAKX,EAAMM,KAEtBH,EACEH,EAAMM,IAGN","file":"../dirname.js","sourcesContent":["define([\r\n\t\"./paths\"\r\n],function(paths){\r\n    /**\r\n     * Return the directory name of a path. Similar to the Unix `dirname` command.\r\n     *\r\n     * Note that BrowserFS does not validate if the path is actually a valid\r\n     * directory.\r\n     * @example Usage example\r\n     *   paths.dirname('/foo/bar/baz/asdf/quux')\r\n     *   // returns\r\n     *   '/foo/bar/baz/asdf'\r\n     * @param [String] p The path to get the directory name of.\r\n     * @return [String]\r\n     */\r\n    function dirname(p) {\r\n        // We get rid of //, but we don't modify anything else (e.g. any extraneous .\r\n        // and ../ are kept intact)\r\n        p = paths._removeDuplicateSeps(p);\r\n        var absolute = p.charAt(0) === paths.sep;\r\n        var sections = p.split(paths.sep);\r\n        // Do 1 if it's /foo/bar, 2 if it's /foo/bar/\r\n        if (sections.pop() === '' && sections.length > 0) {\r\n            sections.pop();\r\n        }\r\n        // # of sections needs to be > 1 if absolute, since the first section is '' for '/'.\r\n        // If not absolute, the first section is the first part of the path, and is OK\r\n        // to return.\r\n        if (sections.length > 1 || (sections.length === 1 && !absolute)) {\r\n            return sections.join(paths.sep);\r\n        }\r\n        else if (absolute) {\r\n            return paths.sep;\r\n        }\r\n        else {\r\n            return '.';\r\n        }\r\n    }\r\n\r\n    return paths.dirname = dirname;\r\n});"]}